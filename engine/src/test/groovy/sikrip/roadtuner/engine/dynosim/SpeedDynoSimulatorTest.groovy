package sikrip.roaddyno.engine.dynosim

import sikrip.roaddyno.logreader.VBOLogReader
import sikrip.roaddyno.model.DynoSimulationResult
import sikrip.roaddyno.model.LogEntry
import spock.lang.Specification
import spock.lang.Unroll

class SpeedDynoSimulatorTest extends Specification {

    @Unroll
    def "Power at #rpm should be #power"(double rpm, double power) {
        given: "a dyno simulation"
        double fgr = 4.3;
        double gr = 1.310;
        double tyreDiameter = 590;
        double carWeight = 920;
        double occWeight = 90;
        double fa = 1.7;
        double cd = 0.33;

        VBOLogReader logReader = new VBOLogReader();

        List<LogEntry> logEntries = logReader.readLog(getClass().getResource("/sample-vbo-1.vbo").getPath());

        List<LogEntry> runLogEntries = logEntries.subList(3479, 3536);

        DynoSimulationResult result = DynoSimulator.runBySpeed(runLogEntries, fgr, gr, tyreDiameter, carWeight, occWeight, fa, cd);

        double[][] dataset = result.powerDataset();
        expect: "the proper power value at the given rpm"
        dataset[1][dataset[0].findIndexOf {it == rpm}] == power
        where:
        rpm     |   power
        3890.54867828999	|	59.108575619379884
        3957.2467506607236	|	60.55287055372078
        4024.306803152414	|	62.07616407437012
        4091.760526439809	|	63.623019714246894
        4159.610600069228	|	65.20464049260197
        4227.894448141679	|	66.87133269323061
        4296.660296643729	|	68.59652974577918
        4365.969423588787	|	70.43763523907117
        4438.74410764197	|	77.58085174872924
        4516.711942363664	|	82.92222310734533
        4598.638118577605	|	88.33388257130706
        4684.210079169888	|	93.54319650163082
        4773.2138567425445	|	98.99677189980818
        4865.3895783675935	|	104.13340187947938
        4960.422659580458	|	109.38820903993253
        5058.337243827816	|	114.98810617444742
        5158.678302519298	|	119.69909876748498
        5260.137527091639	|	122.85535840441429
        5361.261480143723	|	124.5836846465055
        5461.049349950154	|	125.51435804728345
        5558.922549546906	|	125.79569886347889
        5654.407175814382	|	125.4205504834043
        5747.372168759219	|	125.13098021379892
        5838.29349009767	|	125.61760090578808
        5927.518382766063	|	125.94680203433379
        6014.844688970232	|	125.76221335644966
        6100.081840880338	|	125.4239603529786
        6183.171335829634	|	124.87585894793908
        6264.196267010174	|	124.53459636483386
        6343.493893426229	|	124.65845857233498
        6421.612625761441	|	125.59798140501992
        6498.9965612224205	|	126.8015557351414
        6575.60510985313	|	127.57940926016182
        6650.9167968401325	|	127.30470830104613
        6724.007433202274	|	125.41942586433197
        6793.8147077695685	|	121.97160956972752
        6859.746065120441	|	118.10135078112927
        6921.897609769923	|	114.55472615558062
        6980.660130255052	|	111.45135129622852
        7036.663663318538	|	109.42243235107266
        7090.756624070744	|	108.55054685184106
        7143.276462729387	|	107.35020982940947
        7194.065695406158	|	105.89170922779688
        7243.406609998446	|	105.40024097313338
        7292.388545891729	|	107.09657726978116
        7342.4347780616345	|	110.8782804683825
        7394.527525631437	|	115.66263727275089
        7448.848531085231	|	120.20045711850995
        7504.516250366882	|	122.49194016851797
        7559.871835106994	|	122.03131216331133
        7614.515752546533	|	123.08188919953517
        7669.062073839169	|	124.50373539816897
        7723.64514102688	|	125.99150734323956
        7778.259072660378	|	127.4195400300537
        7832.844534481382	|	128.7413796895198
        7887.321118381554	|	129.9283456836173
    }
}
